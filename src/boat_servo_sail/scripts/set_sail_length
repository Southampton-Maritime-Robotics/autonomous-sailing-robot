#!/usr/bin/env python
# this line is needed so the execution happens in python environment

"""
set sail to appropriate length for picking up speed
"""
import rospy
from std_msgs.msg import Float32
from std_msgs.msg import Int64
from std_msgs.msg import Header
from bbio import *
from Servo import *
import time
from boat_servo_sail import sail_angle

wind_direction = 120
SAIL_SERVO_MAX = 100
SAIL_SERVO_MIN = 45
MARGIN = SAIL_SERVO_MAX - SAIL_SERVO_MIN
sail_servo = Servo(PWM1A)
# servo2 = Servo(PWM2A)
sail_servo.write(SAIL_SERVO_MIN)


def store_wind_direction(wind_dir):
    global wind_direction
    wind_direction = wind_dir.data

def publish_sail(compass):
     h = Header()
     if not rospy.is_shutdown():
         sail = sail_angle.find_length(compass.data, wind_direction)
         rospy.loginfo('sail position' + str(sail))
         #update header time
         h.stamp = rospy.Time.now()
         sail_PWM = sail * MARGIN
         # safety test so servos will not be set to values
         # that might damage the boat
         if ((sail_PWM > SAIL_SERVO_MIN) and
             (sail_PWM < SAIL_SERVO_MAX)):
            sail_servo.write(sail * MARGIN)
         # TODO: switch to sail message that includes header
         publishSail.publish(sail)



def sail_react():
    rospy.Subscriber("/sensors/Compass", Int64, publish_sail)

    # save wind direction
    rospy.Subscriber("/sensors/WindDirection", Int64, store_wind_direction)
    rospy.spin()

if __name__ == '__main__':
    try:
        rospy.init_node('sail_talker', anonymous=True)
        publishSail = rospy.Publisher('SailPosition', Float32, queue_size=10)
        sail_react()
    except rospy.ROSInterruptException: pass
